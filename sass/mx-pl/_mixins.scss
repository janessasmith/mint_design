// call breakpoint lib via bp shortcut
@mixin bp ($args...) {
	@include breakpoint($args...) {
		@content
	}
}

// rem, em
@function em($pxval, $base: $browser-fs){
	@return ($pxval / $base) * 1em;
}
@function rem($pxval, $base: $browser-fs){
	@return ($pxval / $base) * 1rem;
}
//rem fallback, exmp [ @include rem(font-size 20px, width 100px) ]
@mixin rem($properties...){
	@each $prop, $val in $properties {
		#{$prop}: $val;
		#{$prop}: rem($val);
	}
}

// retina
@mixin retina {
	@media only screen and (-webkit-min-device-pixel-ratio: 2),
		only screen and (   min--moz-device-pixel-ratio: 2),
		only screen and (     -o-min-device-pixel-ratio: 2/1),
		only screen and (        min-device-pixel-ratio: 2),
		only screen and (                min-resolution: 192dpi),
		only screen and (                min-resolution: 2dppx) {
		@content
	}
}

// PLACEHOLDER COLOR
@mixin pl {
  $placeholders: ":-webkit-input" ":-moz" "-moz" "-ms-input";
  @each $placeholder in $placeholders {
    &:#{$placeholder}-placeholder {
      @content;
    }
  }
}

// HOVER
@mixin hover {
  &:hover, &:active, &:focus {@content}
}

// SMOOTH
@mixin smooth($int: 0.3) {
    transition: all $int + s;
}


// Idiot grids
// @include idiotgrid(112px 68px, 160px 70px, last);
@mixin idiotgrid($map...){
	$container: 1000px;
	$col-sum: 0;
	$gutter-sum: 0;
	$n: 1;
	@each $col-width, $gutter-width in $map{
		@if ($col-width != last) {
			&:nth-child(#{$n}) {
				float: left;
				width: ($col-width / $container) * 100%;
				margin-right: ($gutter-width / $container) * 100%;
			}
			$col-sum: $col-sum + $col-width;
			$gutter-sum: $gutter-sum + $gutter-width;
		}
		@else {
			&:nth-child(#{$n}) {
				float: left;
				width: (($container - ($col-sum + $gutter-sum)) / $container) * 100%;
				margin-right: 0;
			}
		}
		$n: $n + 1;
	}
}
